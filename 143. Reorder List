class Solution {
public:
    void reorderList(ListNode* head) {
        if (!head || !head->next) return;

        // 1. Find middle (slow will be at middle)
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // 2. Reverse second half
        ListNode *prev = NULL, *curr = slow->next, *upcome = NULL;
        slow->next = NULL; // break the list into two halves

        if (curr) upcome = curr->next;
        while (curr) {
            curr->next = prev;
            prev = curr;
            curr = upcome;
            if (upcome) upcome = upcome->next;
        }

        // 3. Merge two halves
        ListNode* first = head;
        ListNode* second = prev;
        while (second) {
            ListNode* tmp1 = first->next;
            ListNode* tmp2 = second->next;

            first->next = second;
            second->next = tmp1;

            first = tmp1;
            second = tmp2;
        }
    }
};
