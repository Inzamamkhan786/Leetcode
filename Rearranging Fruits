class Solution {
public:
    long long minCost(vector<int>& basket1, vector<int>& basket2) {
      long long cost = 0;

      unordered_map<int,int> freq;
      for(int fruit : basket1){
        freq[fruit]++;
      }

      for(int fruit: basket2){
        freq[fruit]--;
      }

      for(auto& [fruit,val]:freq){
        if(val%2 != 0){
            return -1;
        }
      }


      vector<int> extra1;
      vector<int> extra2;

      for(auto& [fruit,val]:freq){
        if(val>0){
            for(int i = 0; i < val/2; i++){
                extra1.push_back(fruit);
            }

        }else if(val<0){
            for(int i = 0; i < -val/2; i++){
                extra2.push_back(fruit);
            }
        }
      }

      sort(extra1.begin(),extra1.end());
      sort(extra2.rbegin(),extra2.rend());

    int minVal = min(*min_element(basket1.begin(),basket1.end()) , *min_element(basket2.begin(),basket2.end()));
    
    for(int i = 0; i < extra1.size(); i++){
        cost = cost + min(2*minVal,min(extra1[i],extra2[i]));
    }


    return cost;
        
    }
};
