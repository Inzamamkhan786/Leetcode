class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int left = 0;
        int right = numbers.size()-1;
        while(left < right){
            int sum = numbers[left] + numbers[right];
            if(sum == target){
                return {left+1,right+1};
            }else if(sum < target){
                left++;
            }else if(sum > target){
                right--;
            }
        }
    return {};
        
    }
};






Here another logic but the time compexity is 0(n*2);

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> temp_array;
        for(int i = 0; i<numbers.size()-1; i++){
            for(int j = i+1; j<numbers.size(); j++){
                if(numbers[i] + numbers[j] == target){
                    temp_array.push_back(i+1);
                    temp_array.push_back(j+1);
                    return temp_array;
                }
            }
        }
    return {};
        
    }
};
