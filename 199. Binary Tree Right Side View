/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
        map<int,int>m;
        vector<int>output;

        if(root == NULL){
            return output;
        }
        q.push({root,0});

        while(q.size() > 0){
            TreeNode* curr = q.front().first;
            int currDistance = q.front().second;
            q.pop();

            if(m.find(currDistance) == m.end()){
                m[currDistance] = curr->val;
            }

            if(curr->right != NULL){
                q.push({curr->right,currDistance + 1});
            }

             if(curr->left != NULL){
                q.push({curr->left,currDistance + 1});
            }

        }

        for(auto &it : m){
            output.push_back(it.second);
        }

        return output;
    }
};
