/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0){
            return NULL;
        }

        int n = lists.size();
        
        ListNode*head = NULL;
        ListNode*tail = NULL;

        for(auto node : lists){
            if(node == NULL){
                continue;
            }

            if(head == NULL){
                head = node;
                tail = node;
                while(tail->next != NULL){
                    tail = tail->next;
                }
            }else{
                tail->next = node;
                while(tail->next != NULL){
                    tail = tail->next;
                }
            }
        }

        vector<int>values;
        ListNode*curr = head;
        while(curr != NULL){
            values.push_back(curr->val);
            curr = curr->next;
        }

        curr = head;
        sort(values.begin(),values.end());
        int i = 0;
        while(curr != NULL){
            curr->val = values[i];
            curr = curr->next;
            i++;
        }

        return head;

        
    }
};
